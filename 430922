#include"filename.h"

using namespace std;

void getFiles( string path, vector<string>& files , vector<_finddata_t> &fileStuc);
int showfiles(string filepath, vector<string> &files, vector<_finddata_t> &fileStuc);

bool needSonDir = false;

int main()
{
	string path;//路径string，本程序获取该路径下的文件信息
	char str[NUMOFALINE];//路径字符串
	char str_1[2];
	ifstream fin(".\\filepath.txt");//输入流 打开文件filepath
	fin.getline(str, NUMOFALINE);//从文件中获取 文件夹路径
	fin.getline(str_1, 2);
	if (!strcmp(str_1,"Y") || !strcmp(str_1,"y"))//是否需要子目录下文件
	{
		needSonDir = true;
	}
	else 
	{
		needSonDir = false;
	}

	path = str;//str的值传入string对象path中
	vector<string> files;//储存文件名
	vector<_finddata_t> fileStuc;//储存文件信息
	
	getFiles(path, files, fileStuc);//获得文件信息
	showfiles(path,files, fileStuc);//输出文件信息到out.txt
}

int showfiles(string filepath, vector<string> &files, vector<_finddata_t> &fileStuc)
{
		char ch[] = ".\\out.txt";
		ofstream fout(ch);
   	char str[30];  
  	int size = files.size();  
   	for (int i = 0;i < size;i++)
   	{  
       cout<<files[i].c_str()<<"	";
       cout<<"\t"<<fileStuc[i].size/1024<<"KB";
       cout<<ctime(&fileStuc[i].time_create)<<endl;
       fout<<files[i].c_str();
       fout<<"\t"<<fileStuc[i].size/1024<<"KB";
       fout<<"\t"<<ctime(&fileStuc[i].time_create)<<endl;
		}  
}
		
void getFiles( string path, vector<string>& files , vector<_finddata_t> &fileStuc)  
  {  
       //文件句柄  
       long  hFile   =   0;  
       //文件信息  
       struct _finddata_t fileinfo;  
       string p;  
       if((hFile = _findfirst(p.assign(path).append("\\*").c_str(),&fileinfo)) !=  -1)  
       {  
           do
           {  
               //如果是目录,迭代之  
               //如果不是,加入列表  
               if((fileinfo.attrib &  _A_SUBDIR))//目录
               {  
                  if(strcmp(fileinfo.name,".") != 0  &&  strcmp(fileinfo.name,"..") != 0)
                  {
                 		files.push_back(fileinfo.name);
                 		if (needSonDir)
                 		{
		                 	getFiles( p.assign(path).append("\\").append(fileinfo.name), files, fileStuc);//递归,操作子目录！
		                }
                  }
               }  
               else  //非目录
               {  
                   //files.push_back(p.assign(path).append("\\").append(fileinfo.name) ); //带绝对路径的文件名
                   files.push_back(fileinfo.name);//直接是文件名
               }
               fileStuc.push_back(fileinfo);//加入容器
           }while(_findnext(hFile, &fileinfo)  == 0);  
           _findclose(hFile);
       }  
    }  
    

